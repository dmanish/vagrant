# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/ubuntu-18.04"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "public_network", bridge: "en0: Wi-Fi (AirPort)"
  # config.vm.network "public_network", ip: "10.192.201.254"
  # config.vm.network "public_network", use_dhcp_assigned_default_route: true, bridge: "en0: Wi-Fi (AirPort)"
  # config.vm.network "private_network", ip: "192.168.236.77", virtualbox__intnet: "puppetlan"
  for proto in ["tcp", "udp"] do
        config.vm.network "forwarded_port", guest: 5060, host: 5060, protocol: proto
        config.vm.network "forwarded_port", guest: 2345, host: 2345, protocol: proto
  end

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
     #sudo su -
     apt-get update
     apt-get install -y make gcc libssl-dev wget g++
     ## install java 8
     echo "INSTALLING JAVA 8"
     add-apt-repository -y  ppa:webupd8team/java
     apt-get update
     echo oracle-java7-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections
     apt install -y oracle-java8-installer
     echo 'JAVA_HOME = "/usr/lib/jvm/java-8-oracle"' >> /etc/environment
     ## install SIPp
     echo "INSTALLING SIPP"
     mkdir ./sipp
     cd ./sipp
     wget -q https://github.com/SIPp/sipp/releases/download/v3.5.1/sipp-3.5.1.tar.gz
     gzip -d sipp-3.5.1.tar.gz
     tar -xvf sipp-3.5.1.tar
     echo "SIPP downloaded"
     rm -f sipp-3.5.1.tar
     echo "*******cd sipp-3.5.1/*****"
     cd sipp-3.5.1/
     echo "**********apt-get install -y ncurses-dev**********"
     apt-get install -y ncurses-dev
     echo "***********apt-get install -y libpcap-dev*********"
     apt-get install -y libpcap-dev
     echo "**************./configure --with-pcap***************"
     ./configure --with-pcap
     make
     touch /home/vagrant/.bashrc
     chmod 644 /home/vagrant/.bashrc
     echo "export PATH=$PATH:`pwd`" >>  /home/vagrant/.bashrc
     #install gvim
     apt-get install vim-gnome
     #wget -q https://github.com/dmanish/vimtools/blob/master/.vimrc

  SHELL
  # config.vm.provision "shell", path: "./prov/myprovisions"
end
